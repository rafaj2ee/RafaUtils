package runtest;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SmartCommonTest.java
 *
 */
import inas.smart.*;
import java.io.IOException;
import javax.swing.*;
import java.io.InputStream;
import java.awt.Font;
import java.awt.FontFormatException;
import java.io.File;
import org.jdesktop.beansbinding.*;
/**
 *
 * @author inasystem
 */

public class SmartCommonTest extends javax.swing.JFrame {

    /** Creates new form SmartCommonTest */
    public SmartCommonTest() {
        initComponents();
        SD.init();
        //jCheckBoxSBSMode.setVisible(false);

         

        int ret = 0;
     

        //int ret=0;
        SD.index = 0;
        ret = SD.jSmartComm_GetDeviceList2(spl);
        SD.NoDevice = spl.n;
        jTextArea1.setText("The number of Printer = " + Integer.toString(SD.NoDevice) + "\n");

       
        String[] sid = new String[256];
       
        for (int i = 0; i < SD.NoDevice; i++) {
           sid[i] = SD.CopyUntilNull(spl.desc[i]);
            jPrinterComboBoxAddItem(sid[i]);
            System.out.print("Printer ID[" + i + "] = " + sid[i] + "\n");
        }     
  
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel2 = new javax.swing.JPanel();
        jCheckBoxSBSMode = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jButtonDCLCsdFilePrint = new javax.swing.JButton();
        jButtonDCLFunctionDrawingPrint = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jButtonMagneticWriteAndRead = new javax.swing.JButton();
        jButtonGetATR = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButtonCSDFilePrint = new javax.swing.JButton();
        jButtonFunctionDrawingPrint = new javax.swing.JButton();
        jButtonDirectDrawingPrint = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPrinterComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Smart Printer");
        setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jCheckBoxSBSMode.setText("Use SBS(Step-By-Step) Mode, When Print");
        jCheckBoxSBSMode.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jCheckBoxSBSMode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxSBSModeItemStateChanged(evt);
            }
        });
        jCheckBoxSBSMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSBSModeActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("DCL Mode"));

        jButtonDCLCsdFilePrint.setText("CSD File Print");
        jButtonDCLCsdFilePrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDCLCsdFilePrintActionPerformed(evt);
            }
        });

        jButtonDCLFunctionDrawingPrint.setText("Image File Print");
        jButtonDCLFunctionDrawingPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDCLFunctionDrawingPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDCLFunctionDrawingPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(jButtonDCLCsdFilePrint, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jButtonDCLCsdFilePrint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDCLFunctionDrawingPrint)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Option Device"));

        jButtonMagneticWriteAndRead.setText("Magnetic Function Test");
        jButtonMagneticWriteAndRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMagneticWriteAndReadActionPerformed(evt);
            }
        });

        jButtonGetATR.setText("Smart Card IC Test");
        jButtonGetATR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetATRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonGetATR, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMagneticWriteAndRead, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jButtonMagneticWriteAndRead)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonGetATR)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Driver Mode"));

        jButtonCSDFilePrint.setText("CSD File Print");
        jButtonCSDFilePrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCSDFilePrintActionPerformed(evt);
            }
        });

        jButtonFunctionDrawingPrint.setText("Image File Print");
        jButtonFunctionDrawingPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFunctionDrawingPrintActionPerformed(evt);
            }
        });

        jButtonDirectDrawingPrint.setText("Driect Drawing Print");
        jButtonDirectDrawingPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDirectDrawingPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCSDFilePrint, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jButtonFunctionDrawingPrint, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jButtonDirectDrawingPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jButtonCSDFilePrint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFunctionDrawingPrint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDirectDrawingPrint)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Opened Smart Printer Information");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3)
                        .addComponent(jCheckBoxSBSMode)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxSBSMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPrinterComboBox.setFont(new java.awt.Font("굴림", 1, 11)); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jPrinterComboBox, org.jdesktop.beansbinding.ObjectProperty.create(), jPrinterComboBox, org.jdesktop.beansbinding.BeanProperty.create("elements"));
        bindingGroup.addBinding(binding);

        jPrinterComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPrinterComboBoxMouseClicked(evt);
            }
        });
        jPrinterComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jPrinterComboBoxItemStateChanged(evt);
            }
        });
        jPrinterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrinterComboBoxActionPerformed(evt);
            }
        });
        jPrinterComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPrinterComboBoxPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPrinterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jPrinterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDirectDrawingPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirectDrawingPrintActionPerformed
     

        int ret=0;
      

         long status[] = new long[1];
	 ret = SD.jSmartComm_GetStatus(SD.handle, status);
         

         System.out.print("GetStatus() = " + ret + ", status = " + status[0] + "\n");

         int ribbon_type[] = new int[1];
	 ret = SD.jSmartComm_GetRibbonType(SD.handle, ribbon_type);

         System.out.print("GetRibbonType() = " + ret + ", ribbon_type = " + ribbon_type[0] + "\n");

	 int ribbon_remain[] = new int[1];
	 ret = SD.jSmartComm_GetRibbonRemain(SD.handle, ribbon_remain);
	 System.out.print("GetRibbonRemain() = " + ret + ", ribbon_remain = " + ribbon_remain[0] + "\n");

         ret = SD.jSmartComm_CardIn(SD.handle);

	//int rect[] = new int[4]; // rect[0] = left, rect[1] = top, rect[2] = right, rect[3] = bottom
        RECT rect = new RECT();

	ret = SD.jSmartComm_DrawImage(SD.handle, (byte)0, (byte)1, 0, 0, 0, 0, "bgrimg.bmp".toCharArray(), rect);
        System.out.print("DrawImage() = " + ret + "\n");

        
        
	ret = SD.jSmartComm_DrawImage(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)1/*PANELID_COLOR*/, 60, 100, 0, 0, "photo.jpg".toCharArray(), rect);
	System.out.print("DrawImage() = " + ret + "\n");

	ret = SD.jSmartComm_DrawText(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)2/*PANELID_BLACK*/, 40, 40, "Arial".toCharArray(), 12, (byte)1/*FONT_BOLD*/,
							 "SMART Printer JAVA Test !!!".toCharArray(), rect);
	System.out.print("DrawText() = " + ret + "\n");

	ret = SD.jSmartComm_DrawText(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)2/*PANELID_BLACK*/, 550, 200, "Arial".toCharArray(), 12, (byte)1/*FONT_BOLD*/,
							 "Name:".toCharArray(), rect);
	System.out.print("DrawText() = " + ret + "\n");

	ret = SD.jSmartComm_DrawText(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)2/*PANELID_BLACK*/, 700, 200, "Arial".toCharArray(), 12, (byte)1/*FONT_BOLD*/,
							 "Yan Saquet".toCharArray(), rect);
	System.out.print("DrawText() = " + ret + "\n");

	ret = SD.jSmartComm_DrawText(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)2/*PANELID_BLACK*/, 550, 280, "Arial".toCharArray(), 12, (byte)1/*FONT_BOLD*/,
							 "ID:".toCharArray(), rect);
	System.out.print("DrawText() = " + ret + "\n");

	ret = SD.jSmartComm_DrawText(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)2/*PANELID_BLACK*/, 700, 280, "Arial".toCharArray(), 12, (byte)1/*FONT_BOLD*/,
							 "123456789".toCharArray(), rect);
	System.out.print("DrawText() = " + ret + "\n");

	ret = SD.jSmartComm_DrawText(SD.handle, (byte)0 /*PAGE_FRONT*/, (byte)2/*PANELID_BLACK*/, 200, 580, "Arial".toCharArray(), 10, (byte)1/*FONT_BOLD*/,
							 "I&A System Co., Ltd. All Rights Reserved.".toCharArray(), rect);
	System.out.print("DrawText() = " + ret + "\n");

        if(spl.devtype[SD.index] == 0)
        {
            ret = SD.jSmartComm_Print(SD.handle);
        }
        else
        {
            ret = SD.jSmartDCL_Print(SD.handle, 0);
        }
	System.out.print("Print() = " + ret + "\n");
        
}//GEN-LAST:event_jButtonDirectDrawingPrintActionPerformed

    private void jButtonFunctionDrawingPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFunctionDrawingPrintActionPerformed
       
        int nres = SC.SM_SUCCESS;
        
       
        long uis[] = new long[1];
        boolean bHasRot = false;
        //if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_GetStatus(SD.handle, uis);
        //}
        if (nres == SC.SM_SUCCESS) {
            if ((uis[0] & SC.SMSC_S_EQUIPROTATOR) > 0) {
                bHasRot = true;
            } else {
                bHasRot = false;
            }
        }

        // get current printer setting...
        CHASM_DEVMODE dm = new CHASM_DEVMODE();
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_GetPrinterSettings(SD.handle, dm);
        }
        if (nres == SC.SM_SUCCESS) {
            if (bHasRot) {
                dm.dwDocPrintSide = SC.SMART_PRINTSIDE_BOTH;
            } else {
                dm.dwDocPrintSide = SC.SMART_PRINTSIDE_FRONT;
            }
        }
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_SetPrinterSettings(SD.handle, dm);
        }

        // start SBS mode
        if (nres == SC.SM_SUCCESS
                && bUseSBS) {
            nres = SD.jSmartComm_SBSStart(SD.handle);
        }

        // insert card
        //if (nres == SC.SM_SUCCESS && bUseSBS) {
        if (nres == SC.SM_SUCCESS)
        {
            nres = SD.jSmartComm_CardIn(SD.handle);
        }
        nres = SC.SM_SUCCESS;
        RECT rc = new RECT();
        char char_szurl[] = new char[1024];
        String szurl = new File("").getAbsolutePath();
     
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_DrawImage(SD.handle, SC.PAGE_FRONT, SC.PANELID_COLOR,
                    0, 0, 0, 0, "bgrimg.bmp".toCharArray(), rc);
        }
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_DrawText(SD.handle, SC.PAGE_FRONT, SC.PANELID_BLACK,
                    20, 60, "Tahoma".toCharArray(), -60, SC.FONT_BOLD,
                    "SMART Print Test !!!".toCharArray(), rc);
        }
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_DrawText(SD.handle, SC.PAGE_BACK, SC.PANELID_BLACK,
                    20, 60, "Tahoma".toCharArray(), -30, SC.FONT_BOLD,
                    "SMART Print Test !!!".toCharArray(), rc);
        }

        // print to device...
        // print start front page...
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_Print(SD.handle);
            if (bUseSBS)
            {
                nres = SD.jSmartComm_DoPrint(SD.handle);
            }
        }
        

        
        
        // print start back page...
        if (nres == SC.SM_SUCCESS && bUseSBS && bHasRot) {
            
            if(spl.devtype[SD.index] == 0)
                {
                    nres = SD.jSmartComm_DoPrint(SD.handle);
                }
                else
                {
                    nres = SD.jSmartDCL_Print(SD.handle, 0);
                }
        }


        // card out, if under SBS mode...
        if (bUseSBS) {
            SD.jSmartComm_CardOut(SD.handle);
        }

        // end SBS mode...
        if (bUseSBS) {
            nres = SD.jSmartComm_SBSEnd(SD.handle);
        }

        // close device...
        /*
        if (true) {
            nres = SD.jSmartComm_CloseDevice(SD.handle);
        }
         */
        if (nres != SC.SM_SUCCESS) {
            ShowDialogBox("ERROR", "ERROR 1002 : Function Drawing Print" + nres);
            return;
        }
}//GEN-LAST:event_jButtonFunctionDrawingPrintActionPerformed

    private void jButtonCSDFilePrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCSDFilePrintActionPerformed
        // TODO add your handling code here:
        //String PrinterID = SD.getDeviceListID(0);
        // open device...

        int nres = SmartCommConstant.SM_SUCCESS;

        // start SBS mode
        if (nres == SmartCommConstant.SM_SUCCESS && bUseSBS) {
            nres = SD.jSmartComm_SBSStart(SmartDriver.handle);
        }

        // insert card
        if (nres == SmartCommConstant.SM_SUCCESS && bUseSBS) {
            nres = SD.jSmartComm_CardIn(SmartDriver.handle);
        }

        // open .csd document...
        //	test.csd is a single paged document.
        nres = SmartCommConstant.SM_SUCCESS;
        String szurl = new File(".").getAbsolutePath();
        //szurl = szurl + File.separator + "test2.csd";
        szurl = "sample.csd";
        if (nres == SmartCommConstant.SM_SUCCESS) {
            nres = SD.jSmartComm_OpenDocument(SmartDriver.handle, szurl);
        }

        // print to device...
        if (nres == SmartCommConstant.SM_SUCCESS) {
            //nres = SD.jSmartComm_Print(SD.handle);
            
              if(SmartPrinterList.devtype[SmartDriver.index] == 0)
                {
                    nres = SD.jSmartComm_Print(SmartDriver.handle);
                }
                else
                {
                    nres = SD.jSmartDCL_Print(SmartDriver.handle, 0);
                }
        }

        // print start front page...
        if (nres == SmartCommConstant.SM_SUCCESS
                && bUseSBS) {
           // nres = SD.jSmartComm_DoPrint(SD.handle);
              if(SmartPrinterList.devtype[SmartDriver.index] == 0)
                {
                    nres = SD.jSmartComm_DoPrint(SmartDriver.handle);
                }
        }

        // close opened document.
        if (nres == SmartCommConstant.SM_SUCCESS) {
            nres = SD.jSmartComm_CloseDocument(SmartDriver.handle);
        }

        // card out, if under SBS mode...
        if (nres == SmartCommConstant.SM_SUCCESS && bUseSBS) {
            SD.jSmartComm_CardOut(SmartDriver.handle);
        }

        // end SBS mode...
        if (bUseSBS) {
            nres = SD.jSmartComm_SBSEnd(SmartDriver.handle);
        }

        // close device...
        //nres = SD.jSmartComm_CloseDevice(SD.handle);

        if (nres != SmartCommConstant.SM_SUCCESS) {
            ShowDialogBox("ERROR", "1001 : CSD File Print, ret=" + nres);
            return;
        }
}//GEN-LAST:event_jButtonCSDFilePrintActionPerformed

    private void jButtonGetATRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetATRActionPerformed
        // TODO add your handling code here:
        // open device...

        int nres = SC.SM_SUCCESS;
      
        byte btATR[] = new byte[64];
        long nATRLen[] = new long[1];
        nATRLen[0] = 64;
        String strATR;

        if (SC.SM_SUCCESS == nres) {
            nres = SD.jSmartComm_SBSStart(SD.handle);
        }
        if (SC.SM_SUCCESS == nres) {
            nres = SD.jSmartComm_CardIn(SD.handle);
        }
        if (SC.SM_SUCCESS == nres) {
            nres = SD.jSmartComm_Move(SD.handle, SC.CARDPOS_IC);
        }

        if (SC.SM_SUCCESS == nres) {
            nres = SD.jSmartComm_ICHContact(SD.handle);                         //여기서 에러
        }

        if (SC.SM_SUCCESS == nres) {
            nres = SD.jSmartComm_ICPowerOn(SmartDriver.handle, DEV_IC, nATRLen, btATR);
        }
        if (nres == SmartCommConstant.SM_SUCCESS) {
            strATR = "ATR : ";
            String strHex = null;
           /*
            for (int i = 0; i < nATRLen[0]; i++) {
                       
                strHex.concat(hex((int) (btATR[i] & 0xff), 2));
                strHex.concat(" ");
            }
             
             */
            //ShowDialogBox("MSG", "strATR : [" + strATR);
        }
        if (true) {
            SD.jSmartComm_ICPowerOff(SD.handle, DEV_IC);
        }

        if (true) {
            SD.jSmartComm_CardOut(SD.handle);
        }
        if (true) {
            SD.jSmartComm_SBSEnd(SD.handle);
        }
     
        if (nres != SmartCommConstant.SM_SUCCESS) {
            ShowDialogBox("ERROR ", "ERROR 1009 : GetATR : " + nres);
        }
    }//GEN-LAST:event_jButtonGetATRActionPerformed

    private void jButtonMagneticWriteAndReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMagneticWriteAndReadActionPerformed
        // TODO add your handling code here:
        int ret;
		int nID[] = new int[1];
		char ID[] = new char[32*16];
                ret = SD.jSmartComm_SBSStart(SD.handle);
		ret = SD.jSmartComm_CardIn(SD.handle);
		System.out.print("CardIn() = " + ret + "\n");

		String track1 = "1111111111";
		String track2 = "22222222222222222222";
		String track3 = "333333333333333333333333333333";
		ret = SD.jSmartComm_MagSetAllBuffer(SD.handle,
									true /* 0: FALSE, 1: TRUE */, track1.toCharArray(), track1.length(),
									true /* 0: FALSE, 1: TRUE */, track2.toCharArray(), track2.length(),
									true /* 0: FALSE, 1: TRUE */, track3.toCharArray(), track3.length());
		System.out.print("MagSetAllBuffer() = " + ret + "\n");
		System.out.print("write track1 = " + track1 + "\n");
		System.out.print("write track2 = " + track2 + "\n");
		System.out.print("write track3 = " + track3 + "\n");

		ret = SD.jSmartComm_MagWriteAction(SD.handle, 7 /* MAG_T1 | MAG_T2 | MAG_T3 */, 0 /* 0: LoCo, 1: HiCo */);
		System.out.print("MagWriteAction() = " + ret + "\n");

		ret = SD.jSmartComm_MagReadAction(SD.handle, 7 /* MAG_T1 | MAG_T2 | MAG_T3 */);
		System.out.print("MagReadAction() = " + ret + "\n");

		char ctrack1[], ctrack2[], ctrack3[];
		ctrack1 = new char[1024];
		ctrack2 = new char[1024];
		ctrack3 = new char[1024];
		int len1[], len2[], len3[];
		len1 = new int[1];
		len2 = new int[2];
		len3 = new int[3];
		ret = SD.jSmartComm_MagGetAllBuffer(SD.handle,
									1 /* 0: FALSE, 1: TRUE */, ctrack1, len1,
									1 /* 0: FALSE, 1: TRUE */, ctrack2, len2,
									1 /* 0: FALSE, 1: TRUE */, ctrack3, len3);

		String read_track1 = new String(ctrack1, 0, len1[0]);
		String read_track2 = new String(ctrack2, 0, len2[0]);
		String read_track3 = new String(ctrack3, 0, len3[0]);
		System.out.print("MagGetAllBuffer() = " + ret + "\n");
		System.out.print("read track1 = " + read_track1 + "\n");
		System.out.print("read track2 = " + read_track2 + "\n");
		System.out.print("read track3 = " + read_track3 + "\n");


		ret = SD.jSmartComm_CardOut(SD.handle);
                ret = SD.jSmartComm_SBSEnd(SD.handle);
		System.out.print("CardOut() = " + ret + "\n");
   
}//GEN-LAST:event_jButtonMagneticWriteAndReadActionPerformed

    private void jButtonDCLFunctionDrawingPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDCLFunctionDrawingPrintActionPerformed
        // TODO add your handling code here:
        int nres = SC.SM_SUCCESS;
        long uis[] = new long[1];
        boolean bHasRot = false;	// flag for rotator is installed.

        String strID;
            
        int ret = 0;
        
        if(SD.handle != -1)
        {   
            if(spl.devtype[SD.index] == 0)
            {

                SD.jSmartComm_CloseDevice(SD.handle);
            }
            else
            {
                SD.jSmartDCL_CloseDevice(SD.handle);
               }
            SD.init();
        }
        ret = jPrinterComboBox.getSelectedIndex();
        
        SD.index = ret;

         ret = SD.jSmartDCL_OpenDevice2(spl.desc[SD.index], SD.SMART_OPENDEVICE_BYDESC, 2);
       
        ///////////////////////////////////////////////////////////////////////////////////////////
       
        // get status...
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_GetStatus(SD.handle, uis);
        }

        if ((uis[0] & SC.SMSC_S_EQUIPROTATOR) == SC.SMSC_S_EQUIPROTATOR) {
            bHasRot = false;
        } else {
            bHasRot = true;
        }

        // start SBS mode
        if (nres == SC.SM_SUCCESS
                && bUseSBS) {
            nres = SD.jSmartComm_SBSStart(SD.handle);
        }

        // insert card
        if (nres == SC.SM_SUCCESS
                && bUseSBS) {
            nres = SD.jSmartComm_CardIn(SD.handle);
        }

        RECT rc = new RECT();
        //      rc.init();
        String szurl = new File(".").getAbsolutePath();
        szurl = szurl + File.separator + "bgrimg.bmp";
        char char_szurl[] = new char[1024];

        char_szurl = szurl.toCharArray();
        // draw...
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_DrawImage(SD.handle,
                    SC.PAGE_FRONT, SC.PANELID_COLOR, 0, 0, 0, 0, char_szurl, rc);
        }
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_DrawText(SD.handle, SC.PAGE_FRONT, SC.PANELID_BLACK,
                    20, 60, "Tahoma".toCharArray(), -60, SC.FONT_BOLD, "SMART DCL Test !!!".toCharArray(), rc);
        }
        if (nres == SC.SM_SUCCESS && bHasRot) {
            nres = SD.jSmartComm_DrawText(SD.handle, SC.PAGE_BACK, SC.PANELID_BLACK, 20, 60,
                    "Tahoma".toCharArray(), -30, SC.FONT_BOLD, "SMART DCL Test !!!".toCharArray(), rc);
        }

        // print to device...
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartDCL_Print(SD.handle, SC.SMART_PRINTSIDE_FRONT);
            //nres = SD.jSmartDCL_Print(SD.handle, bHasRot ? SC.SMART_PRINTSIDE_BOTH : SC.SMART_PRINTSIDE_FRONT);
        }

        // print start front page...
        if (nres == SC.SM_SUCCESS && bUseSBS) {
            nres = SD.jSmartComm_DoPrint(SD.handle);
        }
        // print start back page...
        if (nres == SC.SM_SUCCESS && bUseSBS && bHasRot) {
            nres = SD.jSmartComm_DoPrint(SD.handle);
        }

        // card out, if under SBS mode...
       if (bUseSBS) {
            SD.jSmartComm_CardOut(SD.handle);
        }

        // end SBS mode...
        if (bUseSBS) {
            SD.jSmartComm_SBSEnd(SD.handle);
        }

        // close device...
        
        if (nres != SmartCommConstant.SM_SUCCESS) {
            ShowDialogBox("ERROR", "ERROR 1005 : DCL Function Drawing Print :" + nres);
            return;
        }
    }//GEN-LAST:event_jButtonDCLFunctionDrawingPrintActionPerformed

    private void jButtonDCLCsdFilePrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDCLCsdFilePrintActionPerformed
        // TODO add your handling code here:
        int nres = SmartCommConstant.SM_SUCCESS;
        long uis[] = new long[1];
        boolean bHasRot = false;	// flag for rotator is installed.

        String strID;
        
        ///////////////////////////////////////////////////////////////////////////////////////////
              
        int ret = 0;
        
        if(SmartDriver.handle != -1)
        {   
            if(SmartPrinterList.devtype[SmartDriver.index] == 0)
            {

                SD.jSmartComm_CloseDevice(SmartDriver.handle);
            }
            else
            {
                SD.jSmartDCL_CloseDevice(SmartDriver.handle);
            }
            SmartDriver.init();
        }
        ret = jPrinterComboBox.getSelectedIndex();
        
        SmartDriver.index = ret;
                   
        ret = SD.jSmartDCL_OpenDevice2(SmartPrinterList.desc[SmartDriver.index], SmartDriver.SMART_OPENDEVICE_BYDESC, 2);
       
       SmartDriver.handle = ret;
       
        ///////////////////////////////////////////////////////////////////////////////////////////
       
        // start SBS mode
        if (nres == SmartCommConstant.SM_SUCCESS && bUseSBS) {
            nres = SD.jSmartComm_SBSStart(SmartDriver.handle);
        }

        // insert card...
        if (nres == SmartCommConstant.SM_SUCCESS) {
            nres = SD.jSmartComm_CardIn(SmartDriver.handle);
        }

        // open .csd document...
        //	test.csd is a single paged document.
        String szurl = new File(".").getAbsolutePath();
        //szurl = szurl + File.separator + "sample.csd";

        szurl = "sample.csd";

        if (nres == SmartCommConstant.SM_SUCCESS) {
            nres = SD.jSmartComm_OpenDocument(SmartDriver.handle, szurl);
        }

        // print to device...
        if (nres == SmartCommConstant.SM_SUCCESS) {
            nres = SD.jSmartDCL_Print(SmartDriver.handle, SmartCommConstant.SMART_PRINTSIDE_FRONT);
        }

        // print start front page...
        if (nres == SmartCommConstant.SM_SUCCESS
                && bUseSBS) {
            nres = SD.jSmartComm_DoPrint(SmartDriver.handle);
        }

        // close opened document.
        if (nres == SC.SM_SUCCESS) {
            nres = SD.jSmartComm_CloseDocument(SmartDriver.handle);
        }
        // eject card
        if (nres == SmartCommConstant.SM_SUCCESS && bUseSBS) {
            SD.jSmartComm_CardOut(SmartDriver.handle);
        }

        // end SBS mode...
        if (bUseSBS) {
            SD.jSmartComm_SBSEnd(SmartDriver.handle);
        }

        // close device...
       

        if (nres != SmartCommConstant.SM_SUCCESS) {
            ShowDialogBox("ERROR", "ERROR 1004: DCL CSD File Print :" + nres);
            return;
        }
    }//GEN-LAST:event_jButtonDCLCsdFilePrintActionPerformed

    private void jCheckBoxSBSModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSBSModeActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxSBSMode.isSelected()) {
            bUseSBS = true;
        } else {
            bUseSBS = false;
        }
}//GEN-LAST:event_jCheckBoxSBSModeActionPerformed

    private void jPrinterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrinterComboBoxActionPerformed
        // TODO add your handling code here:
        
      int ret = 0;
      
        
        if(SD.handle != -1)
        {   
            if(spl.devtype[SD.index] == 0)
            {

                SD.jSmartComm_CloseDevice(SD.handle);
            }
            else
            {
                SD.jSmartDCL_CloseDevice(SD.handle);
            }
            SD.init();
        }
        ret = jPrinterComboBox.getSelectedIndex();
        
        SD.index = ret;
        ///////////////////////////////////////////////////////////////////////////////////////////
       
        ///////////////////////////////////////////////////////////////////////////////////////////
        if(spl.devtype[SD.index] == 0)
        {
               ret = SD.jSmartComm_OpenDevice2(spl.desc[SD.index], SD.SMART_OPENDEVICE_BYDESC);
            
        }
        else
        {
              ret = SD.jSmartDCL_OpenDevice2(spl.desc[SD.index], SD.SMART_OPENDEVICE_BYDESC, 2);
            
        }

        System.out.print("Printer ID[0] = " + SD.PrinterID +" is opened, Handle = " + SD.handle + "\n");
        SD.handle = ret;
        ret = SD.jSmartComm_GetDeviceInfo2(SD.SmartPrinterInfo, SD.SmartPrinterList.id[SD.index], SD.SMART_OPENDEVICE_BYID);
        SmartPrinterInfo devInfo = SD.SmartPrinterInfo;

         jTextArea1.setText( "     Printer ID - Opened : " + SD.CopyUntilNull(devInfo.id) + "\n"
                            + "     Printer Name      : " + SD.CopyUntilNull(devInfo.name) + "\n"
                            + "     Printer DEV       : " + SD.CopyUntilNull(devInfo.dev) + "\n"
                            + "     Printer Dev_Type  : " + Integer.toString(devInfo.dev_type[0])+ "\n"
                            + "     Printer Pid       : " + Integer.toString(devInfo.pid[0])+ "\n"
                            + "     Printer USB Port  : " + SD.CopyUntilNull(devInfo.usbport) + "\n"
                            + "     Printer TCP Port  : " + Integer.toString(devInfo.tcpport[0])+ "\n"
                            + "     Printer Is_SSL    : " + Integer.toString(devInfo.is_ssl[0])+ "\n"
                            + "     Printer Is_Dual   : " + Integer.toString(devInfo.is_dual[0])+ "\n"
                            + "     Printer Is_Bridge : " + Integer.toString(devInfo.is_bridge[0])+ "\n"
                            + "     Printer ic1       : " + SD.CopyUntilNull(devInfo.ic1) + "\n"
                            + "     Printer ic2       : " + SD.CopyUntilNull(devInfo.ic2) + "\n"
                            + "     Printer rf1       : " + SD.CopyUntilNull(devInfo.rf1) + "\n"
                            + "     Printer rf2       : " + SD.CopyUntilNull(devInfo.rf2) + "\n"
                             );         
    }//GEN-LAST:event_jPrinterComboBoxActionPerformed

    private void jPrinterComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPrinterComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPrinterComboBoxMouseClicked

    private void jPrinterComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jPrinterComboBoxItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_jPrinterComboBoxItemStateChanged

private void jCheckBoxSBSModeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxSBSModeItemStateChanged
// TODO add your handling code here:
            if (jCheckBoxSBSMode.isSelected()) {
            bUseSBS = true;
        } else {
            bUseSBS = false;
         }
}//GEN-LAST:event_jCheckBoxSBSModeItemStateChanged

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here:
    int ret = 0;
     if(spl.devtype[SD.index] == 0)
    {
        SD.jSmartComm_CloseDevice(SD.handle);
    }
    else
    {
         SD.jSmartDCL_CloseDevice(SD.handle);
        
    }
}//GEN-LAST:event_formWindowClosing

private void jPrinterComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPrinterComboBoxPropertyChange
// TODO add your handling code here:
 
    
}//GEN-LAST:event_jPrinterComboBoxPropertyChange
    
    static void jPrinterComboBoxAddItem(String Item) {

        // TODO add your handling code here:
        jPrinterComboBox.addItem(Item);
           }



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {

        new SmartCommonTest().setVisible(true);

     //   SmartDriver.init();

    }

    public static void ShowDialogBox(String Msg, String OKMsg) {
        javax.swing.JFrame jFrame = new JFrame(Msg);
        JTextArea button = new JTextArea(OKMsg);
        jFrame.add(button);
        jFrame.setSize(400, 400);
        jFrame.setVisible(true);
        jFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

    }

    public static String hex(final int value, final int length) {
        StringBuilder str = new StringBuilder(Integer.toString(value, 16).toUpperCase());
        if (str.length() < length) {
            int falta = (length - str.length());
            for (int i = 1; i <= falta; i++) {
                str.insert(0, "0");
            }
        } else if (str.length() > length) {
            str = new StringBuilder();
            for (int i = 1; i <= length; i++) {
                str.append("*");
            }
        }
        return str.toString();
    }

    public static int memcmp(byte[] fr, byte[] to, final int length) {

        for (int i = 0; i < length; i++) {
            if (fr[i] != to[i]) {
                return (fr[i] - to[i]);
            }
        }
        return 0;        
    }

    static boolean DCL_MODE = false;
    static inas.smart.SmartDriver SD = new inas.smart.SmartDriver();
    SmartCommConstant SC = new SmartCommConstant();
    SmartPrinterList spl = new SmartPrinterList();
    SmartPrinterInfo devInfo = new SmartPrinterInfo();

    boolean bUseSBS = false;
    // Variables declaration - do not modify
    static javax.swing.JButton jButtonCSDFilePrint;
    static javax.swing.JButton jButtonFunctionDrawingPrint;
    static javax.swing.JButton jButtonDirectDrawingPrint;
    static javax.swing.JButton jButtonMagneticWriteAndRead;
    static javax.swing.JButton jButtonGetATR;
    static javax.swing.JButton jButtonContactlessSmartCard;
    static javax.swing.JButton jButtonDCLDriectDrawingPrint;
    static javax.swing.JButton jButtonDCLFunctionDrawingPrint;
    static javax.swing.JButton jButtonDCLCsdFilePrint;
    static javax.swing.JButton jButtonOpenCSDDocument;
    static javax.swing.JButton jButtonCloseCSDDocument;
    static javax.swing.JCheckBox jCheckBoxSBSMode;
    static javax.swing.JComboBox jLocationBox;
    static javax.swing.JComboBox jPrinterComboBox;
    static javax.swing.JLabel jLabel1;
    static javax.swing.JLabel jLabel2;
    static javax.swing.JPanel jPanel1;
    static javax.swing.JPanel jPanel10;
    static javax.swing.JPanel jPanel2;
    static javax.swing.JPanel jPanel3;
    javax.swing.JPanel jPanel4;
    javax.swing.JPanel jPanel5;
    javax.swing.JPanel jPanel6;
    javax.swing.JPanel jPanel7;
    javax.swing.JPanel jPanel8;
    javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane4;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration

    final int	DEV_IC		= SC.INTERNALDEV;
   final int	DEV_SIM		= SC.EXTERNALDEV;
    final int	DEV_INTERNALRF	= SC.INTERNALDEV;
    final int	DEV_EXTERNALRF	= SC.EXTERNALDEV;
 /*
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCSDFilePrint;
    private javax.swing.JButton jButtonDCLCsdFilePrint;
    private javax.swing.JButton jButtonDCLFunctionDrawingPrint;
    private javax.swing.JButton jButtonDirectDrawingPrint;
    private javax.swing.JButton jButtonFunctionDrawingPrint;
    private javax.swing.JButton jButtonGetATR;
    private javax.swing.JButton jButtonMagneticWriteAndRead;
    private javax.swing.JCheckBox jCheckBoxSBSMode;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JComboBox jPrinterComboBox;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

     */
}
